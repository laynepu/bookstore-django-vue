"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 4.2.19.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

import os
from pathlib import Path
from django.core.exceptions import ImproperlyConfigured
from dotenv import load_dotenv

# Load environment variables from .env file
# load_dotenv(dotenv_path=os.path.join(Path(__file__).resolve().parent.parent, '.env'))

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get("DEBUG", True)  # Get DEBUG from .env, default to True

# Define the secrets file path
SECRETS_FILE = Path("/app/config/.env.secrets")

# Check if the environment variable SECRET_KEY exists and is not empty
if not ("SECRET_KEY" in os.environ and os.environ.get("SECRET_KEY")):  # If SECRET_KEY does not exist or is empty
    if SECRETS_FILE.exists():
        load_dotenv(dotenv_path=SECRETS_FILE, override=True)  # Forcefully read the file and overwrite

# Get SECRET_KEY from environment variables
SECRET_KEY = os.environ.get("SECRET_KEY")

# Validate if SECRET_KEY is set
if not SECRET_KEY:
    raise ImproperlyConfigured('[settings.py] The SECRET_KEY environment variable is not set.')

# Print SECRET_KEY only in debug mode (Do NOT use in production)
if DEBUG:
    print(f"[settings.py] SECRET_KEY loaded: {SECRET_KEY[:8]}********")

ALLOWED_HOSTS = os.environ.get("ALLOWED_HOSTS", "localhost").split(",") # Get ALLOWED_HOSTS from .env, split by comma


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'corsheaders',
    'category',
    'book',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'backend.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.environ.get("DATABASE_NAME", "bookstore_db"),  # Default database name
        'USER': os.environ.get("DATABASE_USER", "bookstore_user"),  # Default database user
        'PASSWORD': os.environ.get("DATABASE_PASSWORD"),  # Password should not have a default value
        'HOST': os.environ.get("DATABASE_HOST", "db"),  # Default database host
        'PORT': os.environ.get("DATABASE_PORT", "5432"),  # Default database port
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# CORS Configuration
CORS_ALLOWED_ORIGINS = [
    "http://localhost:5173",  # For development with Vue.js dev server
    # "https://your-production-frontend-domain.com",  # Example for production
]

REST_FRAMEWORK = {
    'EXCEPTION_HANDLER': 'backend.exceptions.custom_exception_handler',
}